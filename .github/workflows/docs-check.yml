name: Documentation Check

on:
  pull_request:
    branches: [ dev, staging, main ]
    paths:
      - '*.md'
      - 'docs/**'
      - '.github/workflows/docs-check.yml'
  
  push:
    branches: [ main ]
    paths:
      - '*.md'
      - 'docs/**'

jobs:
  docs-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install markdown tools
        run: |
          npm install -g markdownlint-cli
          npm install -g markdown-link-check
          
      - name: Lint markdown files
        run: |
          echo "=== Markdown Linting ==="
          markdownlint README.md CONTRIBUTING.md docs/ || {
            echo "❌ Markdown linting failed"
            echo "Please fix the markdown formatting issues above"
            exit 1
          }
          echo "✅ Markdown linting passed"
          
      - name: Check markdown links
        run: |
          echo "=== Link Checking ==="
          
          # Check README.md links
          markdown-link-check README.md --config .github/markdown-link-check-config.json || {
            echo "⚠️  Some links in README.md may be broken"
          }
          
          # Check CONTRIBUTING.md links  
          markdown-link-check CONTRIBUTING.md --config .github/markdown-link-check-config.json || {
            echo "⚠️  Some links in CONTRIBUTING.md may be broken"
          }
          
          # Check docs directory
          find docs -name "*.md" -exec markdown-link-check {} \; || {
            echo "⚠️  Some links in docs/ may be broken"
          }
          
          echo "Link checking completed"
          
      - name: Check documentation structure
        run: |
          echo "=== Documentation Structure Check ==="
          
          # Check if README has all required sections
          REQUIRED_SECTIONS=(
            "Overview"
            "Features" 
            "Installation"
            "Development"
            "Contributing"
          )
          
          for section in "${REQUIRED_SECTIONS[@]}"; do
            if grep -q "## .*$section" README.md; then
              echo "✅ Found section: $section"
            else
              echo "❌ Missing section: $section"
              exit 1
            fi
          done
          
          # Check if docs directory has expected files
          EXPECTED_DOCS=(
            "docs/core/tweak.md"
            "docs/download/bh-download.md"
            "docs/settings/main-settings.md"
          )
          
          echo "Checking for expected documentation files..."
          for doc in "${EXPECTED_DOCS[@]}"; do
            if [[ -f "$doc" ]]; then
              echo "✅ Found: $doc"
            else
              echo "⚠️  Expected but not found: $doc"
            fi
          done
          
      - name: Check for iOS version consistency
        run: |
          echo "=== iOS Version Consistency Check ==="
          
          # Extract iOS versions mentioned in README
          README_IOS_VERSIONS=$(grep -o "iOS [0-9]*\.[0-9]*\.*[0-9]*" README.md | sort | uniq)
          echo "iOS versions mentioned in README:"
          echo "$README_IOS_VERSIONS"
          
          # Check if Makefile iOS version is consistent
          if [[ -f "Makefile" ]]; then
            MAKEFILE_IOS_VERSION=$(grep "TARGET.*:" Makefile | grep -o "[0-9]*\.[0-9]*" | head -1)
            echo "iOS version in Makefile: $MAKEFILE_IOS_VERSION"
            
            # Check if README mentions the Makefile version
            if echo "$README_IOS_VERSIONS" | grep -q "$MAKEFILE_IOS_VERSION"; then
              echo "✅ iOS versions are consistent"
            else
              echo "⚠️  iOS version inconsistency detected"
              echo "README mentions: $README_IOS_VERSIONS"
              echo "Makefile uses: $MAKEFILE_IOS_VERSION"
            fi
          fi
          
      - name: Documentation summary
        run: |
          echo "## 📚 Documentation Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ **Status:** All documentation checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** Some documentation issues found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Checked:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Markdown formatting and linting" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Link validation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Documentation structure" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Version consistency" >> $GITHUB_STEP_SUMMARY
