name: Automated Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-release:
    runs-on: macos-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
      changelog_path: ${{ steps.changelog.outputs.changelog_path }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Setup Environment (Xcode, Theos, SDK)
        run: |
          # Setup Xcode
          xcode-select -s /Applications/Xcode_15.2.app
          sudo xcodebuild -license accept
          # Install Theos & Dependencies
          sudo mkdir -p /opt/theos && sudo chown -R $(whoami) /opt/theos
          git clone --recursive https://github.com/theos/theos.git /opt/theos
          echo "THEOS=/opt/theos" >> $GITHUB_ENV
          brew install ldid xz
          # Install SDK
          mkdir -p /opt/theos/sdks
          curl -L -o sdk.tar.xz https://github.com/theos/sdks/releases/download/master-146e41f/iPhoneOS16.5.sdk.tar.xz
          tar -xf sdk.tar.xz -C /opt/theos/sdks/ && rm sdk.tar.xz

      - name: Update version in control file
        run: |
          # âœ… CORRECTED STEP
          # Assign the version from the previous step to a shell variable
          VERSION_TAG="${{ steps.get_version.outputs.VERSION }}"
          # Use shell parameter expansion to remove the 'v' prefix and update the file
          sed -i.bak "s/^Version:.*/Version: ${VERSION_TAG#v}/" control

      - name: Build Tweak
        id: build
        run: |
          make clean package FINALPACKAGE=1
          DEB_FILE=$(find packages -name "*.deb")
          echo "deb_path=$DEB_FILE" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Generates a changelog from commits since the last tag
          CHANGELOG_BODY=$(git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD)
          if [ -z "$CHANGELOG_BODY" ]; then
            CHANGELOG_BODY="No changes listed for this version."
          fi
          echo "$CHANGELOG_BODY" > release_notes.md
          echo "changelog_path=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.build.outputs.deb_path }}
          body_path: ${{ steps.changelog.outputs.changelog_path }}

      - name: Upload build artifact for next job
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: |
            ${{ steps.build.outputs.deb_path }}
            ${{ steps.changelog.outputs.changelog_path }}

  update-apt-repo:
    needs: build-and-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      - name: Checkout gh-pages Branch
        uses: actions/checkout@v4
        with:
          ref: 'gh-pages'
          path: 'repo'

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: release-assets
          path: build-artifact
      
      - name: Update Sileo Depiction and move .deb
        run: |
          DEB_FILE=$(find build-artifact -name "*.deb")
          CHANGELOG_FILE=$(find build-artifact -name "release_notes.md")
          VERSION=$(echo "${{ needs.build-and-release.outputs.version }}" | sed 's/^v//')
          
          echo "Moving $DEB_FILE to repo/debs/"
          mkdir -p repo/debs
          mv "$DEB_FILE" repo/debs/

          if [ -f "repo/sileo-depiction.json" ]; then
            echo "Updating sileo-depiction.json..."
            CHANGELOG_BODY=$(cat "$CHANGELOG_FILE")

            NEW_CHANGELOG_ENTRY=$(jq -n \
              --arg version "$VERSION" \
              --arg markdown "$CHANGELOG_BODY" \
              '[
                { "class": "DepictionSubheaderView", "title": ("Version " + $version) },
                { "class": "DepictionMarkdownView", "markdown": $markdown },
                { "class": "DepictionSeparatorView" }
              ]')
            
            jq --arg version "$VERSION" --argjson newEntry "$NEW_CHANGELOG_ENTRY" \
               '(.tabs[] | select(.tabname == "Details").views[] | select(.class == "DepictionTableTextView" and .title == "Latest Version").text) = $version |
                (.tabs[] | select(.tabname == "Changelog").views) |= ($newEntry + .)' \
               repo/sileo-depiction.json > tmp.json && mv tmp.json repo/sileo-depiction.json
          fi

      - name: Update APT Repository Files
        run: |
          cd repo
          dpkg-scanpackages --multiversion . > Packages
          bzip2 -k -f Packages
          apt-ftparchive release . > Release
      
      - name: Commit and Push to gh-pages
        run: |
          cd repo
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"
          git add .
          if [ -z "$(git status --porcelain)" ]; then
            echo "No changes to the repository. Nothing to commit."
          else
            git commit -m "Update APT repo for release ${{ needs.build-and-release.outputs.version }}"
            git push
          fi